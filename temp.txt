computer
science
education
issn:
0899-3408
(print)
1744-5175
(online)
journal
homepage:
http://www.tandfonline.com/loi/ncse20
“regressed
experts”
as
a
new
state
in
teachers’
professional
development:
lessons
from
computer
science
teachers’
adjustments
to
substantial
changes
in
the
curriculum
neomi
liberman
,
yifat
ben-david
kolikant
&
catriel
beeri
to
cite
this
article:
neomi
liberman
,
yifat
ben-david
kolikant
&
catriel
beeri
(2012)
“regressed
experts”
as
a
new
state
in
teachers’
professional
development:
lessons
from
computer
science
teachers’
adjustments
to
substantial
changes
in
the
curriculum,
computer
science
education,
22:3,
257-283,
doi:
10.1080/08993408.2012.721663
to
link
to
this
article:

http://dx.doi.org/10.1080/08993408.2012.721663
published
online:
18
sep
2012.
submit
your
article
to
this
journal

article
views:
212
view
related
articles

citing
articles:
3
view
citing
articles

full
terms
&
conditions
of
access
and
use
can
be
found
at
http://www.tandfonline.com/action/journalinformation?journalcode=ncse20
download
by:
[the
uc
davis
libraries]
date:
20
october
2017,
at:
10:40
computer
science
education
vol.
22,
no.
3,
september
2012,
257–283
‘‘regressed
experts’’
as
a
new
state
in
teachers’
professional
development:
lessons
from
computer
science
teachers’
adjustments
to
substantial
changes
in
the
curriculum
neomi
liberman,
yifat
ben-david
kolikant*
and
catriel
beeri
department
of
science
teaching,
school
of
education,
the
hebrew
university,
jerusalem,
israel
(received
8
march
2012;
ﬁnal
version
received
10
august
2012)
due
to
a
program
reform
in
israel,
experienced
cs
high-school
teachers
faced
the
need
to
master
and
teach
a
new
programming
paradigm.
this
situation
served
as
an
opportunity
to
explore
the
relationship
between
teachers’
content
knowledge
(ck)
and
their
pedagogical
content
knowledge
(pck).
this
article
focuses
on
three
case
studies,
with
emphasis
on
one
of
them.
using
observations
and
interviews,
we
examine
how
the
teachers,
we
observed
taught
and
what
development
of
their
teaching
occurred
as
a
result
of
their
teaching
experience,
if
at
all.
our
ﬁndings
suggest
that
this
situation
creates
a
new
hybrid
state
of
teachers,
which
we
term
‘‘regressed
experts.’’
these
teachers
incorporate
in
their
professional
practice
some
elements
typical
of
novices
and
some
typical
of
experts.
we
also
found
that
these
teachers’
experience,
although
established
when
teaching
a
diﬀerent
ck,
serve
as
a
leverage
to
improve
their
knowledge
and
understanding
of
aspects
of
the
new
content.
keywords:
pedagogical
content
knowledge;
polymorphism
and
inheritance
teacher
knowledge;
introduction
due
to
a
reform
in
the
israeli
cs
high
school
curricula,
and
the
development
of
a
new
program
based
on
object-oriented
programming
(oop),
in-service
teachers
who
studied
and
taught
procedural
program-
ming
were
required
in
the
last
decade
to
cope
with
the
new
paradigm
of
oop.
since
most
teachers
were
trained
in
procedural
programming,
they
were
oﬀered
courses
in
oop,
to
enable
them
to
teach
the
new
paradigm.
consequently,
these
in-service
teachers
found
themselves
in
a
rather
unique
situation:
on
the
one
hand
they
were
experienced
cs
teachers
who
knew
the
craft
of
teaching
in
general,
and
teaching
programming
to
high-
*corresponding
author.
email:
yifat.kolikant@mail.huji.ac.il
issn
0899-3408
print/issn
1744-5175
online
ó
2012
taylor
&
francis
http://dx.doi.org/10.1080/08993408.2012.721663
http://www.tandfonline.com
258
n.
liberman
et
al.
school
students
in
particular;
on
the
other
hand
they
were
novices
with
respect
to
the
content
they
had
to
teach.
in
the
years
2006–2008,
we
investigated
how
such
teachers
coped
with
this
challenge.
we
studied
both
how
they
learned
the
new
paradigm,
and
how
they
taught
it,
concentrating
on
the
topics
of
inheritance
and
polymorphism,
advanced
topics
in
oop.
in
this
article,
we
report
on
ﬁndings
concerning
the
second
aspect,
namely
how
these
teachers
coped
with
teaching
the
new
program.
in
broad
terms,
the
article
examines
the
relationship
between
components
of
teachers’
knowledge,
in
particular
between
a
fragile
content
knowledge
and
a
rich
pedagogical
knowledge,
albeit
knowledge
acquired
while
teaching
a
diﬀerent
paradigm.
this
article
focuses
on
sarah
(a
pseudonym),
an
experienced
teacher
whom
we
observed
and
interviewed
when
she
taught
oop
(using
java)
for
the
ﬁrst
time.
the
memories
of
the
two
other
teachers,
rina
and
eli
(pseudonyms),
who
had
taught
oop
for
the
third
and
fourth
time,
respectively,
at
the
time
the
research
was
conducted,
were
useful
for
triangulating
the
ﬁndings.
observations
in
these
two
experienced
teachers’
classes
enabled
us
to
estimate
the
quality
of
their
teaching.
that
we
claim
that
current
models
concerning
the
professional
develop-
ment
of
teachers
do
not
capture
the
situation
that
such
teachers
face,
a
radical
shift
in
the
contents
they
need
to
teach,
because
of
an
(implicit)
premise
that
the
contents
to
be
taught
are
quite
stable
whereas
it
is
the
pedagogy
that
needs
to
be
learned.
our
study
suggests
that
experienced
cs
teachers
do
not
behave
like
novices
when
asked
to
teach
a
paradigm
new
to
them,
although
they
do
not
behave
as
experts
as
well.
we
thus
argue
that
these
teachers
are
posed
in
a
new
state,
which
we
term
‘‘regressed
expert.’’
moreover,
we
suggest
their
rich
teaching
experience,
although
established
when
teaching
a
diﬀerent
content,
enabled
the
teachers
to
function
rather
well
in
their
classroom
and
leverage
the
teaching
experience
to
broaden
their
understanding
of
the
new
subject
and
how
to
teach
it.
future
work
is
the
ﬁndings.
obviously,
nevertheless,
is
of
relevance
to
the
community
of
cs
educators.
curricula
in
cs
change
frequently
and
understanding
the
processes
that
experienced
teachers
undergo
as
they
cope
with
the
challenge
of
teaching
a
new
paradigm
can
be
utilized
to
assist
cs
teachers
in
these
transitions.
the
report
is
also
relevant
to
the
broader
community
of
educators.
indeed,
decision
makers
in
many
countries
are
debating
about
drastic
changes
in
education
to
make
it
relevant
to
the
new
‘‘knowledge
society.’’
such
changes
are
implemented,
teachers
in
many
ﬁelds
will
have
to
cope
with
substantial
reforms.
the
rapid
changes
that
characterize
the
ﬁeld
of
computer
science
education
make
it
a
good
venue
for
examine
how
teachers
can,
if
at
all,
deal
with
such
changes.
required
to
validate
this
report
if
computer
science
education
259
background
teachers’
knowledge
and
knowledge
growth
shulman
(1986,
1987)
distinguishes
among
three
main
categories
of
teacher
knowledge:
content
knowledge
(ck),
i.e.
knowledge
on
the
subject
matter,
pedagogical
knowledge
(pk),
and
pedagogical
content
knowledge
(pck),
which
is
the
knowledge
in
the
intersection
of
ck
and
pk:
the
key
to
distinguishing
the
knowledge
base
of
teaching
lies
at
the
intersection
of
content
and
pedagogy,
in
the
capacity
of
a
teacher
to
transform
the
content
knowledge
he
or
she
possesses
into
forms
that
are
pedagogically
powerful
and
yet
adaptive
to
the
variations
in
ability
and
background
presented
by
the
students.
(shulman,
1987,
p.
15)
the
pck
includes
‘‘the
most
useful
forms
of
representation
of
those
ideas,
the
most
powerful
analogies,
illustrations,
examples,
explanations,
and
demonstrations
–
in
a
word,
the
ways
of
representing
and
formulating
the
subject
that
make
it
comprehensible
to
others.’’
(shulman,
1986,
p.
9).
the
pck
also
includes
an
understanding
of
conceptions
and
preconcep-
tions
that
students
bring
with
them
to
the
lessons
and
knowledge
of
the
strategies
most
likely
to
be
fruitful
in
fostering
students’
understanding.
experts
and
novice
teachers
are
usually
distinguished
by
their
pck.
shulman
(1987)
who
studied
the
process
of
teaching
knowledge
growth,
asserts
that
teachers
‘‘commute
from
the
status
of
learner
to
that
of
teacher,’’
namely
they
develop
pck.
teacher
expertise:
novices
vs.
experts
obviously,
teachers’
knowledge
aﬀects
their
behavior
in
class
(even,
1990;
novak,
1990;
olson,
1990;
palmer,
stough,
burdenski,
&
gonzales,
2005;
tsui,
2009).
a
lot
of
work
was
conducted
to
characterize
experts
in
general
and
expert
teachers
in
particular
(for
details,
cf.
the
review
by
berliner,
2001).
here,
we
mention
several
characteristics
found
to
be
relevant
to
our
work:
conﬁdence,
ﬂexibility,
improvisation,
and
atten-
tiveness
to
students’
needs.
although
novice
teachers
may
master
the
ck,
they
may
feel
insecure
about
teaching
it
because
of
the
fragility
of
their
pck.
in
contrast,
expert
teachers
are
characterized
as
being
conﬁdent
in
class.
expert
teachers
are
ﬂexible
–
they
adjust
and
respond
quickly
to
various
situations
that
occur
in
their
classroom
(berliner,
2001;
tsui,
2009).
they
recognize
teachable
opportunities
in
points
their
students
make,
and
accommodate
their
students’
skills
and
discourse
to
promote
learning.
their
teaching
is
focused
on
and
attuned
to
their
students’
needs
and
involves
explicit
and
implicit
expressions
of
concern
for
their
students.
they
have
the
ability
to
improvise
explanations,
analogies,
and
examples,
and
their
explanations
260
n.
liberman
et
al.
are
clear.
their
teaching
is
usually
characterized
with
high
interactivity
with
the
students.
in
contrast,
novices
may
fear
to
stray
from
their
lesson
plans.
they
often
have
diﬃculties
in
ﬁnding
good
answers
to
students’
questions,
or
suitable
examples
to
clarify
problematic
material
(berliner,
1994,
2001;
leinhardt,
1989;
zilberstein
&
katz,
1998).
the
novice
teacher
is
primarily
concerned
about
her
own
survival
in
the
class
(bents
&
bents,
1990;
fuller,
1973).
they
are
cognitively
overloaded
during
class
and
hence
have
diﬃculties
to
recognize
teachable
opportunities,
let
alone
respond
to
them
during
class.
teacher
professional
development
teacher
expertise
is
characterized
in
the
literature
from
two
main
aspects:
the
quality
of
their
performance
(e.g.
berliner,
1994;
borko,
1992;
leinhadt,
1989;
eisenhart
&
jones,
1992;
tsui,
2009)
and
the
motives,
concerns,
and
interests
that
project
on
their
behavior
(bents
&
bents,
1990;
fuller,
1973).
in
all
models,
it
is
noted
that
not
all
the
teachers
make
it
to
the
ﬁnal
stage,
of
an
expert
teacher,
but
rather
can
end
up
in
any
of
the
interim
stages.
berliner’s
(1994)
model
of
teacher
development
emphasizes
the
change
in
teacher
performance.
his
model
includes
ﬁve
stages:
the
ﬁrst
stage
is
that
of
a
novice,
whose
behavior
is
characterized
by
attempts
to
implement
the
‘‘rules’’
and
‘‘procedures’’
they
have
been
taught,
and
hence
low
ﬂexibility.
typically,
this
stage
is
common
among
prospective
teachers
and
ﬁrst-year
teachers.
in
the
next
four
stages
these
teachers
gain
in-situ
knowledge,
and
gradually
learn
to
recognize
the
gray
shades
of
the
tools
of
the
trade.
speciﬁcally,
they
become
conscious
and
sensitive
to
the
cues
present
in
a
given
situation,
and
acquire
a
wide
range
of
possible
responses,
competence
in
improvising
based
on
their
intuition
to
best
serve
their
goals,
and
the
ability
to
reorganize
their
teaching
goals
to
suit
the
situation
they
face.
consequently,
they
become
more
conﬁdent
in
their
ability
and
in
their
actions.
finally,
in
the
last
stage,
expert
teachers
have
strong
intuitive
abilities
to
sense
what
would
be
the
right
response.
such
teachers
demonstrate
ﬂuent
performance.
fuller’s
(1973)
model
emphasizes
the
change
in
teachers’
motives
and
concerns.
this
model
recognizes
three
stages
in
teacher
development,
each
with
diﬀerent
concerns
and
interests
typical
of
the
teachers
in
this
stage:
(a)
the
self
stage,
(b)
the
task
stage,
and
(c)
the
impact
stage.
novices
are
concerned
with
their
own
survival,
for
example
with
questions
such
as
how
to
survive
the
lesson,
discipline
issues,
and
their
status
as
teachers
during
and
after
various
occurrences.
as
teachers
gain
experience
they
become
less
concerned
about
themselves
and
put
their
emphasis
on
their
students.
computer
science
education
261
in
both
models
the
emphasis
is
on
the
growth
of
teachers’
practical
knowledge,
what
shulman
termed
pck
(figure
1,
ﬁrst
line).
in
this
study,
however,
we
have
investigated
a
diﬀerent
situation:
experienced
teachers
who
have
been
successful
in
their
teaching
for
years
but
now
had
to
learn
inherently
new
ck
and
become
able
to
teach
it,
namely
develop
pck
(figure
1,
second
line).
the
new
knowledge
required
more
than
a
minor
adjustment
in
their
work.
the
teachers
were
asked
to
learn
and
teach
a
diﬀerent
programming
paradigm.
thus,
these
teachers
are,
on
the
one
hand,
experienced
cs
teachers
who
know
the
craft
of
teaching,
yet
on
the
other
hand
they
are
novices
with
respect
to
the
new
content
they
had
to
teach.
this
situation
can
be
viewed
as
a
valuable
opportunity
to
examine
how
these
teachers
deal
with
such
a
signiﬁcant
change
and
in
particular
the
role
that
their
previous
knowledge,
their
pck
and
their
ck
plays
in
this
process.
the
characteristics
of
novice
and
expert
cs
teachers
the
cs
studies
include
laboratory
sessions
in
addition
to
‘‘regular’’
teaching
in
the
classroom.
in
these
session
students
practice
program-
ming,
and
interact
with
the
language
system
on
the
solutions
they
developed
to
algorithmic
problems.
this
is,
for
example,
their
opportu-
nity
to
develop
debugging
skills.
typically,
in
these
sessions
students
work
hands-on
the
computer,
usually
at
their
own
pace,
and
the
teacher
moves
among
them
to
oﬀer
help.
novice
cs
teachers
have
to
gain
experience
in
running
laboratory
sessions
and
become
familiar
with
the
‘‘rules
of
the
game’’
in
such
sessions.
these
are
inherently
diﬀerent
from
those
applicable
in
the
classroom,
where
the
teacher
has
more
control
on
the
lesson
structure
and
the
contents
of
the
interaction
with
the
students.
figure
1.
the
diﬀerence
between
the
knowledge
of
experienced
teachers
facing
a
new
programming
paradigm
and
novice
teachers.
262
n.
liberman
et
al.
lapidot
(2004)
traced
novice
and
experienced
cs
teachers
during
their
work.
in
line
with
the
literature,
the
behavior
of
experienced
teachers
was
characterized
with
ﬂuency
and
ﬂexibility,
whereas
novice
teachers
indicated
they
were
concerned
about
their
survival.
laboratory
sessions
seemed
especially
threatening
because
of
their
student-centered
nature.
the
novice
teachers
felt
insecure
with
their
knowledge
and
lacked
the
practical
knowledge
to
smoothly
manage
the
lessons.
they
had
diﬃculties
to
quickly
ﬁnd
adequate
examples
in
response
to
students’
queries,
and
seemed
to
be
threatened
by
the
many
questions
posed
to
them
by
the
students.
an
extreme
example
was
a
novice
teacher
that
was
so
frustrated
that
she
simply
left
the
laboratory.
they
had
to
teach
oop
paradigm
for
the
ﬁrst
research
goal
and
rationale
the
situation
of
the
israeli
teachers
facing
the
paradigm
shift
presents
a
challenge
to
the
traditional
dichotomy
of
novice
vs.
expert.
on
the
one
hand,
the
teachers
were
experienced,
i.e.
they
had
extensive
pk,
as
well
extensive
pck
in
cs,
albeit
in
procedural
programming.
on
the
other
hand,
time.
their
knowledge
in
oop,
let
alone
their
pck
in
this
domain,
was
rather
fragile.
it
is
reasonable
to
expect
that
their
fragile
knowledge
in
the
new
paradigm,
on
one
hand,
and
their
experience
and
relevant
knowledge
on
the
other
hand,
would
aﬀect
their
behavior
and
decision
making
in
class.
while
their
lack
of
pck
in
the
new
paradigm
could
make
them
vulnerable
to
diﬃculties
usually
experienced
by
novices,
their
practical
experience
in
teaching
cs
might
help
them
cope
better
than
novice
teachers
with
the
challenge.
however,
it
might
actually
interfere,
by
inducing
them
to
use
ideas
relevant
to
the
previous
paradigm.
so,
would
they
behave
more
like
as
novices,
experts,
or
in
an
utterly
diﬀerent
way?
the
study
reported
herein
was
launched
to
address
this
question.
methodology
the
study
reported
here
relies
on
the
constructivist
approach
(guba
&
lincoln,
1981).
it
encompassed
three
case
studies
of
teachers
(see
table
1).
our
goal
was
to
better
understand
how
they
teach
the
new
paradigm.
to
this
end,
we
traced
their
instruction
with
a
two-fold
focus:
(a)
analyzing
how
they
dealt
with
diﬃculties,
and
(b)
how
if
at
all,
their
knowledge
evolved
through
the
process.
we
focused
our
analysis
on
the
teaching
process
of
one
advanced
topic
in
the
cs
new
curriculum,
inheritance
and
polymorphism,
using
java.
our
main
research
tool
was
the
observations
conducted
in
the
participants’
classes.
in
addition,
we
conducted
in-depth
interviews
with
computer
science
education
263
table
1.
participants’
description.
characteristics
‘‘mother
tongue’’
teaching
experience
(years)
procedural
programming
oop
number
of
sessions
devoted
to
the
topic
sarah
pascal,
c
classroom
session
lab
session
pen
and
paper
practice
class
characteristics
number
of
students
students’
level
7
0
4
4
2
15
heterogeneous
teachers
eli
c
7
2
5
0
0
17
gifted
rina
pascal,
c
10
3
5
1
1
15
high
achievers
each
teacher
before
and
after
the
series
of
sessions
observed,
as
well
as
ad-
hoc
conversations
right
after
each
session.
we
also
asked
the
three
teachers
to
complete
a
concept
test
in
order
to
assess
their
ck.
participants
table
1
describes
each
teacher
and
his
or
her
class.
the
teachers
were
experienced
teachers
who
taught
advanced
course
in
cs
for
at
least
seven
years.
their
‘‘mother
tongue’’
was
a
procedural
programming
language
(pascal
or
c).
these
teachers
studied
oop
and
java
through
in-service
teacher
training.
we
sought
to
observe
teachers
with
diﬀerent
experience
in
teaching
oop.
as
mentioned
above,
sarah
taught
it
for
the
ﬁrst
time
at
the
time
we
collected
our
data,
eli
had
already
taught
it
for
two
years,
and
rina
for
three
years.
sarah,
the
focus
of
our
study,
participated
in
a
one-year
training
program
with
weekly
sessions
that
included
hand-on
exercises.
rina
and
eli
participated
a
few
years
ago
in
similar
training
programs.
research
tools
as
mentioned
above,
our
main
research
tool
was
the
observation.
we
observed
all
the
lessons
devoted
to
teaching
inheritance
and
polymorph-
ism.
table
1
presents
the
number
of
sessions
(each
session
takes
about
45
minutes)
devoted
by
each
teacher
to
the
topic.
sarah
devoted
10
sessions
to
the
topic,
more
than
both
eli
and
rina.
in
fact,
she
taught
the
topic
in
ﬁve
double
sessions
(namely
90
minutes
with
a
short
recess
in
between).
for
convenience,
we
numbered
these
double
sessions
chronologically.
in
excerpts
brought
from
observations
in
her
classroom
we
indicate
the
264
n.
liberman
et
al.
double
sessions
number
(ds1
to
ds5).
in
total,
17
sessions
were
observed.
all
the
sessions
were
audio
recorded
and
fully
transcribed.
in
order
to
evaluate
the
teachers’
ck
we
administrated
a
concept
test
verbally
before
the
observations
were
conducted.
all
three
teachers
showed
reasonable
mastery
of
fundamental
object-oriented
concepts
yet,
sarah’s
knowledge
in
the
domain
seemed
more
fragile
than
that
of
the
other
two
teachers;
she
also
reported
during
the
interview
that
she
did
not
‘‘swim
smoothly
in
the
new
material.’’
the
test
was
designed
only
to
obtain
a
general
picture
of
their
understanding
of
the
new
paradigm
and
therefore
the
results
are
not
discussed
further.
additionally,
in
order
to
better
understand
the
observed
behavior
we
conducted
in-depth
interviews
with
each
of
the
teachers
before
the
observations
were
conducted.
we
asked
the
teachers
to
describe
the
process
of
their
transition
to
teaching
the
new
paradigm.
this
tool
enabled
us
to
elicit
teaching
diﬃculties
experienced
by
the
participants
and
the
ways
they
coped
with
these
diﬃculties.
the
foci
of
the
interviews
were
(a)
the
ﬁrst
instance
of
teaching
the
new
paradigm
and
how
if
at
all
it
diﬀers
from
more
recent
instances,
(b)
their
teaching
aids
and
resources,
(c)
their
pedagogical
considerations
when
selecting
examples
or
analogies.
finally,
we
conducted
ad-hoc
conversations
almost
after
every
observation.
this
tool
was
necessary
for
clarifying
situations
observed.
data
analysis
the
data
obtained
from
each
tool
was
ﬁrst
analyzed
independently
and
then
an
integrative
analysis
was
conducted.
for
validation,
the
process
was
monitored
by
two
experts
in
cs
education,
for
example
by
comparing
analyses
of
samples
of
the
data
and
resolving
diﬀerences
through
discussions.
interviews
the
interviews
were
analyzed
thematically,
enacting
the
procedure
described
by
shkedi
(2003).
speciﬁcally,
we
ﬁrst
divided
each
interview
into
units
of
meaning,
we
then
conducted
a
mapping
coding
(constructing
a
tree
of
categories),
then
we
processed
the
tree
into
a
more
cohesive
and
concise
coding,
and
eventually
we
analyzed
it
theoretically.
observations
the
sessions
were
divided
into
episodes.
an
episode
terminated
when
one
of
the
following
happened:
the
topic
was
changed,
the
interaction
type
changed
(e.g.
from
teacher–student
to
teacher–class),
and
(c)
the
activity
changed
(e.g.
discussion,
lecture).
computer
science
education
265
our
analysis
focused
on
the
quality
of
teacher
actions
as
well
as
the
quality
of
the
knowledge
reﬂected.
eventually,
each
episode
was
analyzed
according
to
the
following
ﬁve
categories:
(1)
interaction
type:
(a)
(plenum),
teacher–class
(a1)
discussion
or
(a2)
lecture;
(b)
teacher–student
one–one
interac-
tions;
(c)
student–student
one–one
interaction.
and,
additionally
in
the
laboratory
session:
(d)
teacher–computer,
(e)
student–
computer,
and
(f)
(by
‘computer’
we
mean
the
computer
responses,
such
as
compilation
error
messages
and
program
execution
output.)
teacher–student–computer
interaction.
such
as:
(2)
teacher
action:
(a)
answering
a
non-trivial
question,
(b)
presenting
improvising
an
a
(prepared)
explanation
or
an
analogy,
explanation,
an
example,
or
an
analogy.
(c)
(3)
teacher
openness/accessibility
to
the
students.
in
the
spectrum
of
this
category,
high
accessibility
is
manifested
in
actions
such
as
encouraging
students
to
ask
questions,
conducting
discussions,
and
being
attentive
to
the
students.
low
accessibility
is
manifested
for
example
in
ignoring
students’
questions,
and
showing
little
or
no
ﬂexibility
to
meet
students’
needs.
(4)
correctness.
the
knowledge
reﬂected
in
the
teachers’
utterances
was
classiﬁed
as
either
correct
or
incorrect.
(5)
eﬀectiveness.
teachers’
actions
were
classiﬁed
according
to
their
level
of
eﬀectiveness,
for
example,
laconic
answers
were
classiﬁed
as
ineﬀective.
in
the
second
stage,
we
analyzed
the
episodes,
following
shkedi
(2003).
first,
episodes
in
which
the
teacher
participated
were
examined,
and
the
teacher’s
behavior
was
classiﬁed.
four
categories
were
obtained:
responses
to
non-trivial
questions,
an
explanation
of
a
concept,
an
improvisation
of
an
example
of
an
analogy,
usage
of
procedural
programming
(and
teaching)
knowledge.
when
possible,
this
classiﬁca-
tion
was
validated
by
examining
the
interview
conducted
after
the
lesson
in
which
the
episode
occurred.
next,
diﬀerent
characteristics
of
the
behavior
were
identiﬁed.
finally,
the
episodes
were
revisited,
in
order
to
accumulate
statistics,
namely,
how
many
times
has
the
teacher’s
behavior
had
each
characteristic.
this
statistics
allowed
us
to
compare
the
teacher’s
behavior
to
those
of
a
novice
on
one
hand
and
of
an
expert,
on
the
other
hand.
findings
we
ﬁrst
present
the
ﬁndings
obtained
from
the
interviews,
where
the
prominent
theme
was
the
interviewees’
reports
on
a
regression
in
their
266
n.
liberman
et
al.
performance
as
teachers.
then
we
proceed
to
discuss
the
ﬁndings
obtained
from
observations
in
class.
it
turned
out
that
the
teaching
of
eli
and
rina,
who
taught
these
contents
for
the
fourth
and
third
time,
respectively,
resembled
the
performance
expected
from
expert
teachers.
hence,
we
mostly
concentrate
on
sarah,
who
taught
the
new
contents
for
the
ﬁrst
time.
the
observations
in
sarah’s
lessons
revealed
that
despite
her
fragile
content
knowledge,
she
did
not
behave
like
a
novice
cs
teacher
would
be
expected
to.
rather,
the
ﬁndings
suggest
that
a
new
state
of
a
teacher
exists,
that
of
a
‘‘regressed
expert,’’
which
is
a
hybrid
between
the
expert
and
novice
states.
we
noticed,
for
example,
that
being
an
experienced
teacher,
sarah
encouraged
her
students
to
ask
her
questions,
yet
due
to
her
fragile
knowledge,
her
responses
included
tactics
not
aimed
at
promoting
students’
understanding.
we
note
that
sarah’s
behavior
in
classroom
and
laboratory
sessions
diﬀered
signiﬁcantly.
for
example,
the
use
of
the
ineﬀective
tactics
was
less
common
in
laboratory
lessons.
furthermore,
our
observations
indicate
that
sarah
actually
learned
and
improved
her
ck
during
these
sessions.
the
interviews:
teachers’
self-report
on
regression
in
their
performance
recall
that
for
sarah,
this
was
the
ﬁrst
year
she
taught
oop,
while
eli
and
rina
have
been
teaching
oop
for
three
and
two
years,
respectively
when
the
research
was
performed.
the
interviews
conducted
with
all
three
teachers
indicate
their
‘‘regression’’
in
the
ﬁrst
year.
the
fragility
of
sarah’s
knowledge
about
the
new
paradigm,
especially
about
its
more
advanced,
object-oriented,
features,
was
expressed
in
her
ﬁrst
in-depth
interview:
‘‘polymorphism,
what
does
it
mean,
what
is
this
thing
exactly?
and
i
know
that
i
am
about
to
teach
it,
so
i
need
to
do
three
serious
exercises
now,
is
polymorphism.’’
i
would
understand
what
so
that
exactly
she
indeed
openly
admitted
later,
more
than
once,
that
in
contrast
to
her
knowledge
in
procedural
programming
paradigm,
her
knowledge
in
the
new
paradigm
was
fragile.
for
example,
during
the
conversation
conducted
right
after
session
6
she
explained
her
behavior:
they
managed
to
surprise
me.
i
did
not
think
of
these
questions
in
advance.
this
would
never
have
happened
to
me
in
pascal
[because]
i
am
so
in
it
that
i
know
in
advance,
it
is
organized
in
my
head,
all
the
questions
and
the
errors
that
might
arise
to
them.
here
they
stopped
me
in
several
things
that
i
did
not
think
of,
it
was
a
miss.
i
really
felt
that,
as
i
was
answering
their
questions,
i
told
this
to
myself.
there
are
things
that
i
don’t
think
of
[ahead].
fragility
in
the
domain
knowledge
was
not
mentioned
by
eli
and
rina
when
asked
to
recall
their
memories
of
their
behavior
in
the
ﬁrst
year
they
computer
science
education
267
had
taught
the
new
paradigm.
yet,
their
memories
reﬂected
other
characteristics
of
novice
teachers,
such
as
inﬂexibility:
here,
we
bring
two
excerpts
for
illustration:
eli:
during
the
ﬁrst
year
my
progress
was
according
to
the
book,
i
worked
more
closely
with
the
book.
rina:
in
the
ﬁrst
year
i
did
not
know
yet
where
to
focus,
what’s
more
diﬃcult
or
easy
for
the
students.
eli
and
rina
reported
that
in
the
ﬁrst
year
they
adhered
to
the
textbooks.
they
also
stated
that
they
did
not
stray
from
the
pre-prepared
plan
made
by
the
developers
of
the
curriculum
and
treated
the
provided
textbooks
and
materials
as
a
cookbook
to
be
fully
followed.
in
that
year
they
did
not
invent
their
own
exercises
and
examples,
and
did
not
make
any
changes
in
the
teaching
materials
or
the
order
of
presentation
of
the
material.
in
fact,
they
criticized
themselves,
in
particular,
for
not
thinking
about
the
big
picture,
but
instead
focusing
on
each
lesson
separately.
altogether,
their
behavior
in
the
ﬁrst
year,
as
reported
by
them,
was
inﬂexible
like
that
of
a
novice.
classroom
sessions:
sarah’s
diﬃculties
and
coping
strategies
the
analysis
of
the
observations
in
the
classroom
lessons
revealed
a
shared
tendency
among
all
three
teachers.
they
were
all
oriented
in
their
teaching
toward
their
students
and
the
task.
that
was
expressed,
for
example,
by
their
encouragement
of
their
students
to
ask
questions.
this
openness
generated
many
situations
in
which
the
teachers
were
required
to
stray
oﬀ
their
pre-planned
lesson,
as
typical
of
expert
teaching.
the
behavior
of
eli
and
rina,
who
were
observed
when
they
taught
for
the
third
and
the
fourth
time,
respectively,
fully
matched
the
prototype
of
an
expert
teacher
as
described
in
the
literature
(table
2).
sarah’s
case
was
diﬀerent,
however.
three
main
diﬀerences
between
sarah
and
the
two
other
teachers
were
prominent,
all
concerning
their
quality
of
their
on-
the-spot
teaching
decisions:
their
ﬂexibility,
their
ability
to
improvise,
and
their
responses
to
students’
questions.
flexibility
all
three
teachers
were
provided
the
same
teaching
materials
developed
by
the
curriculum
designers.
these
materials
included
the
students’
textbook
and
the
teacher
guide
that
included
a
set
of
powerpoint
slides.
the
slides
included
explanations,
exercises,
and
examples.
eli
and
rina
used
these
materials,
but
in
a
ﬂexible
way.
they
invented
new
examples,
diﬀerent
from
those
provided
in
the
textbook,
they
changed
and
extended
given
exercises,
and
they
changed
the
order
of
contents
taught.
during
268
n.
liberman
et
al.
table
2.
tactcis
used
by
the
teachers
to
respond
to
students’
non-trivial
questions.
%
of
its
use
by
the
teachers
in
response
to
questions
asked
tactics
employed
ineﬀective
tactics
repeating
admitting
to
ignorance
stalling
shifting
ignoring
promoting
tactics
focused
explanation
marking
up
questions
asking
for
feedback
sarah
30
15
30
7
10
7
1
0
eli
6
0
6
0
0
68
10
0
rina
0
0
1
0
0
62
7
14
the
conversations
considerations,
reﬂecting
sensitivity
to
their
students’
needs.
they
explained
their
behavior
with
pedagogical
in
contrast,
sarah
adhered
to
the
teaching
materials.
she
followed
the
slides
faithfully,
although
in
the
conversations
that
followed
she
criticized
their
suitability
for
her
students.
improvisation
two
levels
of
needs
for
improvisation
were
observed.
the
ﬁrst
was
the
local
level,
such
as
when
teachers
needed
to
quickly
come
up
with
explanations,
examples,
and
analogies,
in
response
to
students’
feedback
on
the
pre-prepared
explanations,
diﬀerent
from
those
they
prepared
in
advanced
at
home.
the
other
was
the
session
level,
for
example
when
the
teacher
realized
that
due
to
technical
problem
they
could
not
use
the
powerpoint
slides
and
needed
to
improvise
their
teaching.
both
rina
and
sarah
faced
on
one
occasion
a
technical
problem
due
to
which
they
could
not
use
the
powerpoint
slides.
in
response,
rina
decided
on
the
spot
to
teach
the
same
contents
diﬀerently,
i.e.
she
improvised.
speciﬁcally,
instead
of
the
pre-planned
idea
to
focus
only
on
a
theoretical
explanation
(as
in
the
slides),
she
ﬁrst
presented
the
topic
using
a
practical
demonstration
and
only
then
moved
to
explain
the
mechanism
responsible
for
the
execution.
in
the
conversation
that
followed
the
lesson
she
reﬂected
on
her
teaching
and
judged
it
as
a
good
pedagogical
decision.
in
contrast,
when
sarah
faced
such
a
problem
she
had
a
diﬃculty
to
improvise
an
alternative
approach
to
teaching
the
topic
of
the
lesson,
polymorphism.
instead,
she
focused
her
teaching
on
a
relatively
small
concept
related
to
the
topic,
which
she
termed
the
change
of
the
viewpoint.
note,
however,
that
she
still
chose
to
teach
the
lesson.
she
could
have
chosen
instead,
for
example,
to
tell
the
students
that
because
computer
science
education
269
of
the
technical
problem,
the
lesson
will
be
devoted
to
a
rehearsal
before
the
upcoming
examination.
it
was
evident
that
eli
and
rina
improvised
better
than
sarah
in
response
to
students’
questions.
they
both
attuned
their
explanations
to
the
diﬃculties
expressed
or
implied
by
the
students’
questions.
rina
provided
diversiﬁed
explanations:
she
explained
the
principles
of
a
mechanism,
emphasized
the
dilemma
that
led
to
a
certain
solution,
generalized
from
known
material
to
new
concepts,
and
used
examples
to
illustrate
them.
the
same
is
true
of
eli.
the
following
explanation,
provided
by
eli
when
asked
to
explain
the
creation
of
an
object
by
inheritance
with
a
constructor,
is
illustrative.
eli:
as
we
go
down,
the
subclass
is
more
speciﬁc
and
has
more
properties.
now,
there
is
something
very
important
that
needs
to
be
understood;
it
is
written
here,
but
let
me
emphasize
it:
a
subclass
adds
properties,
but
the
properties
of
the
parent
class
still
exist.
thus,
inside
the
lion,
what
do
i
have?
student:
a
cat.
eli:
a
cat,
exactly.
inside
the
lion
there
hides
a
cat.
and
inside
the
cat
hides?
student:
the
mammal
eli:
the
mammal.
so
we
can
say,
as
a
mini
preparation
to
the
java
coding
phase,
that
the
object
lion
that
we’ll
create,
is
an
object
with
several
layers.
inside
the
lion
there
are
several
layers,
inside
it
i
have
an
object
of
a
mammal,
oh,
the
opposite,
i
have
an
object
of
animal,
an
object
of
mammal,
and
an
object
of
a
cat,
hidden
inside
the
lion.
it
is
kind
of
an
onion,
it
has
those
several
layers.
thus,
eli’s
explanation
focused
on
the
existence
of
properties
of
objects
in
the
presence
of
inheritance.
it
was
interactive
and
moved
back
and
forth
from
objects
in
general
to
the
speciﬁc
example.
eli
also
used
the
metaphor
of
an
onion.
both
eli
and
rina
explained
in
their
interviews
that
they
sought
to
exploit
situations
created
in
class
and
use
them
to
improve
the
explanations
they
provided,
and
the
students’
understanding
of
the
subject
being
taught.
they
also
explained
the
pedagogical
beneﬁts
(in
their
opinions)
from
the
examples
and
analogies
used.
for
example,
when
eli
was
asked
about
the
onion
analogy
cited
above
–
he
said
that
this
was
an
improvisation.
in
his
words:
it
was
an
instinct.
to
explain
this
[topic].
i
really
think
that
the
principles
of
java
[and
oop]
are
simple,
are
beautiful.
it
is
about
organizing,
very
reasonable
organization
of
information
and
relations
among
classes.
and
it
is
very
important
to
me
that
students
will
see
this
simplicity,
so
many
times
i
give
such
examples.
i
am
not
necessarily
going
to
continue
with
the
example
of
the
onion.
270
n.
liberman
et
al.
sarah
too,
improvised,
but
the
quality
of
her
improvisation
was
inferior
in
comparison
to
eli’s
and
rina’s.
speciﬁcally,
she
tended
to
rely
on
her
knowledge
in
procedural
programming.
for
example:
‘‘what
does
it
mean?
look,
when
we
studied,
am,
let’s
go
back
to
pascal,
it’s
the
simplest’’
(ds
3).
her
speech
was
characterized
with
hesitation,
for
example:
‘‘why?
because,
[pause]
again,
look,
see,
let’s
talk
about
[pause]
it
is
easier
to
say
these
words
in
hebrew’’
(ds
3).
sometimes,
sarah
was
not
able
to
complete
the
explanation
of
an
example
or
an
analogy
she
had
just
chosen:
i’ll
give
you
an
example.
i
create
a
class
called
factory.
now
what
have
i
got
in
a
factory?
i
have,
say,
[pause]
or
i’ll
create
a
class
called
cars.
now
cars
have
wheels,
so
wheels,
eh
[pause]
oh
no,
not
a
good
example
(ds
5).
sometime
the
examples
she
chose
did
not
ﬁt
the
pedagogical
goal.
for
example
in
one
situation
sarah
wanted
to
explain
why
[an
object
representing
a]
certain
animal,
e.g.
a
dog,
could
be
cast
to
the
class
animal.
she
said:
‘‘it
is
like
if
put
a
sock
into
a
jewelry
box.
it
wouldn’t
ﬁt
there’’
(ds
3).
this
example
is
inadequate
because
socks
and
jewels
are
not
related
by
inheritance
whereas
classes
representing
speciﬁc
animals
and
the
class
animal
are.
in
fact,
sarah
herself
openly
criticized
herself
after
the
lesson:
‘‘i’m
not
sure
the
examples
were
so
.
.
.
[good].’’
finally,
sometimes
sarah,
when
asked
to
explain
a
concept
used
an
analogy
that
although
not
totally
incorrect,
was
related
only
to
marginal
properties
of
the
concept.
for
example
in
ds
5
the
students
were
presented
with
a
program
with
a
superclass
named
employee
and
sub
class
named
hourly.
an
object
e
of
type
hourly
(the
subclass)
was
created
and
was
assigned
to
a
variable
of
type
employee
(the
superclass).
here
is
a
subsequent
dialog:
student:
how
can
e
suddenly
be
‘hourly’.
?[given
that]
in
the
beginning
it
was
‘employee’?
sarah:
i’ll
explain.
look,
i
am
looking
at
you
now,
i
see
your
face
and
your
[hair]
parting.
if
you
turn
back,
what
will
i
see?
i’ll
see
your
ponytail.
your
face
did
not
change,
your
nose
remains
at
the
same
place.
it
means
that
i
am
looking
from
another
viewpoint.
the
face,
the
body,
the
person
stayed
the
same.
similarly
here,
this
hourly,
was,
is,
and
will
be
hourly,
it
did
not
change.
the
only
question
is
through
which
opening
i
am
looking
at
it.
i
have
an
opening
here,
a
little
window
in
a
triangle
shape—so
all
i
see
is
in
the
shape
of
triangle.
but
is
everything
in
the
shape
of
triangle?
no,
but
i
see
them
as
triangles.
it
is
like
when
you
put
a
red
cellophane
on
your
eyes,
so
you
see
everything
in
red,
but
it
is
not
really
in
red,
a
reference.
apparently
sarah
had
to
explain
that
casting
does
not
change
the
properties
of
an
object.
in
response,
she
focused
on
the
concept
she
had
computer
science
education
271
termed
a
‘‘change
of
viewpoint,’’
bringing
several
examples
to
explain
it.
this
does
not
really
explain
what
is
a
cast,
why
an
hourly
object
can
be
cast
to
an
employee,
and
what
happens
to
its
properties.
it
seems
that
sarah
tended
to
avoid
getting
into
the
details
of
the
concept
and
the
underlying
mechanism,
and
rather
preferred
to
concentrate
on
the
metaphoric
level.
perhaps
because
of
fragile
knowledge
in
the
domain,
sarah
chose
to
to
students
to
guess
the
precise
rule
and
the
underlying
leave
it
mechanism,
thereby
providing
fertile
ground
for
misconceptions.
obviously,
answers
that
do
attempt
to
provide
a
more
precise
explanation
do
not
guarantee
that
misconceptions
will
not
arise.
however,
such
explanations
at
least
guide
students
in
the
right
direction.
in
summary,
unlike
a
novice,
sarah
did
not
avoid
improvisation.
it
seems
that
her
fragile
content
knowledge,
and
lack
of
in
fact,
experience
in
teaching
the
oop
paradigm,
coupled
with
her
need
(and
ability)
to
improvise
in
class
led
her
often
to
provide
explana-
tions
and
examples
that
were
fuzzy,
and
left
a
lot
of
room
for
misconceptions.
however,
the
quality
of
sarah
improvisation
was
much
better
when
she
was
asked
by
her
students’
about
topics
she
taught
earlier
that
year
(such
as
static
class
properties).
she
easily
pulled
(as
if
out
of
her
sleeve)
good
examples,
improvised
explanations
quickly,
and
did
not
hesitate
to
explain
why
things
work
the
way
they
do.
for
example,
here
is
her
(abbreviated)
response
when
asked
about
static
properties
and
what
they
mean:
a
static
property
belongs
to
the
class,
not
to
a
single
object.
for
example,
if
i
deﬁne
a
class
pencil,
i
may
want
to
keep
track
of
the
number
of
pencil
objects
i
generate.
.
.
.
or,
if
i
have
a
class
to
represent
chairs,
and
all
the
chairs
i
generate
will
be
colored
white,
then
the
property
color
will
be
a
class
property.
one
possible
explanation
is
that
for
a
person
with
background
in
procedural
programming,
it
is
easier
to
understand
these
topics
than
inheritance
and
polymorphism.
also,
probably
sarah’s
understanding
of
them
was
enhanced
after
teaching
them,
and
therefore
when
asked
about
them
again
(i.e.
revisited
them
for
the
second
time)
she
performed
better
than
she
did
when
dealing
with
inheritance
(which
she
dealt
with
for
the
ﬁrst
time).
response
to
students’
non-trivial
questions
all
three
teachers
demonstrated
student-oriented
strategy,
that
is,
they
encouraged
students
to
ask
questions,
and
cared
about
their
under-
standing.
however,
we
found
eight
main
tactics
that
were
employed
by
the
272
n.
liberman
et
al.
teachers
to
cope
with
students’
questions,
ﬁve
of
which
were
ineﬀective.
that
is,
they
enabled
the
teachers
to
cope
with
a
question
on
the
spot,
without
necessarily
promoting
the
students’
understanding.
these
ineﬀective
tactics,
mainly
used
by
sarah
(see
table
1),
are
as
follows:
(a)
stalling,
that
is,
postponing
the
answer
to
the
students
by
talking
slowly,
asking
the
student
to
repeat
the
question,
silenced
thinking,
and
asking
the
students
to
write
some
code.
using
this
tactic,
the
teacher
eﬀectively
buys
time
to
think
about
the
question.
in
fact
sarah
herself
told
her
students:
‘‘i
myself
stop
to
think.
it
is
not
ﬂuent.
it
(a
conversation
after
ds
3)
is
deﬁnitely
a
change
in,
ahhh,
the
thought.’’
(b)
shifting,
that
is,
shifting
the
question
or
the
answer
to
a
speciﬁc
case
or
niche
that
the
teacher
masters.
for
example,
the
following
excerpt
is
taken
from
a
discussion
(ds
3)
between
sarah
and
a
student
who
did
not
understand
how
to
string
returns
all
the
properties
of
an
object
of
a
subclass
although
it
has
been
upcast,
and
only
three
out
of
its
properties
exist
in
the
parent
class:
student:
so,
it
will
enable
looking
[at
all
properties]
sarah:
it
can’t,
it
can’t
student:
so
what
is
a
use
that
looks
on
properties
1,2,3?
what
is
it?
sarah:
what
is
use?
look,
what
is
int
[]
,
what
knows
to
contain
int?
this
is
the
reference,
this
is
the
type,
this
type
knows
only
what
this
type
contains.
in
her
response
sarah
did
not
answer
the
student’s
question.
instead,
she
focused
her
answer
on
the
word
‘‘use’’
and
responded
solely
to
that,
and
quite
vaguely
at
that.
(c)
ignoring,
that
is
ignoring
the
students’
question,
but
not
due
to
pedagogical
considerations.
for
example,
in
ds
3
a
student
asked
a
question
that
sarah
ignored.
after
she
passed
several
slides
in
her
presentation
she
said:
‘‘oh,
here’s
the
answer.’’
(d)
repeating
unsatisfactory
answers,
that
is,
repeating
an
answer
to
a
question
(often
vague,
sometime
even
incorrect),
or
repeating
a
phrase
like
a
mantra,
despite
students’
repeated
feedback
of
dissatisfaction.
for
example,
in
ds
5,
sarah
was
asked
6
times
‘‘what’s
upcast?’’
in
the
context
of
an
example
where
a
class
animal
and
a
subclass
mammal
were
deﬁned.
here
are
the
ﬁrst
three
of
her
answers,
the
remaining
three
are
quite
similar:
(1)
upcast
is
when
i,
let’s
say,
i
have
an
object
called
new
mammal,
right?
i
have
a
mammal,
which
inherited
from
someone,
right?
computer
science
education
273
(2)
what
is
upcast
?
upcast
is,
if
for
example
i
have
a
mammal,
let’s
go
back
to
the
ﬁrst
example,
yes?
(3)
upcast
is
that
i
,
for
example,
generated
a
mammal.
in
all
of
the
six
answers
sarah
repeats
almost
the
same
phrase,
although
she
is
probably
aware
that
this
answer
does
not
satisfy
her
students.
moreover,
these
answers
are
on
a
general
level
although
at
the
time
of
the
discussion
the
class
was
already
after
the
general
discussion
of
inheritance,
busy
in
a
programming
task.
the
students
probably
expected
an
answer
that
would
promote
their
under-
standing
of
the
given
task.
(e)
admitting
to
ignorance.
this
tactic
means
that
the
teacher
openly
admitted
that
she
doesn’t
know
the
answer.
for
example,
in
ds
1
the
teacher
tried
to
answer
a
question
but
added
the
following
sentence:
‘‘but
i
don’t
know
for
sure,
and
polymorphism
is
not
clear
to
me,
we
need
to
check
it,
it
is
very
interesting.
i
don’t
have
a
complete
answer.
well
we
have
homework,
both
you
and
i.’’
the
remaining
three
tactics
were
eﬀective
in
promoting
learning
and
are
as
follows:
focused
explanations,
that
it
explanations
attuned
to
the
core
of
the
diﬃculty
expressed
by
or
understood
from
the
students’
utterances;
marking-up
questions,
that
is,
expressing
appreciation
for
the
question
asked,
or
admitting
that
it
is
an
idea
that
the
teacher
did
not
think
of
before,
thereby
encouraging
students
to
ask
good
questions.
for
example
eli
said
to
the
class
‘‘pay
attention,
this
is
an
important
question’’
and
only
then
started
answering
the
question;
and
asking
for
feedback,
that
is
asking
for
students’
feedback
after
answering
a
question,
especially
whether
everyone
understood,
and
explaining
again
when
necessary.
table
2
presents
the
teachers’
use
of
these
tactics
in
response
to
non-
trivial
questions
posed
by
their
students
during
the
ﬁve
classroom
lessons
each
teacher
had
conducted
on
the
subject
of
inheritance.
sarah
coped
with
60
questions
whereas
rina
and
eli
coped
with
50
questions
each.
the
diﬀerence
between
the
distribution
of
sarah’s
use
of
tactics
to
those
of
eli
and
rina
is
evident.
these
two
mostly
used
eﬀective
answering
tactics,
that
is,
they
provided
answers
intended
to
address
their
students’
diﬃculties,
and
promote
their
understanding.
we
did
observe
a
few
situations
where
these
teachers
admitted
to
their
students
that
they
never
thought
of
the
issue
raised
by
the
students;
yet,
even
on
these
occasions
they
answered
the
questions
correctly
and
clearly.
on
the
other
hand,
evidently
sarah,
often
used
ineﬀective
tactics.
unlike
novices,
in
90%
of
the
cases
she
did
not
try
to
avoid
coping
with
the
questions.
however,
because
of
her
fragile
content
knowledge
she
often
could
not
274
n.
liberman
et
al.
deal
with
them
correctly
and
directly,
and
used
the
ineﬀective
tactics
as
a
way
to
manage
the
inconvenience.
however,
when
sarah
went
back
to
teach
topics
she
had
already
taught
earlier
this
year
(such
as
constructors,
the
use
of
new
and
static
methods)
her
responses
to
students’
questions
were
eﬀective,
like
those
of
eli
and
rina,
on
the
level
expected
of
an
expert
teacher.
her
answers
were
ﬂuent
and
clear
and
attuned
to
the
students’
diﬃculties
(in
fact,
most
of
the
promoting
tactics
she
was
observed
to
use
(table
2)
were
in
the
context
of
revisiting
previously
taught
content).
an
analysis
of
sarah’s
behavior
during
her
classroom
lessons
is
summarized
in
table
3,
with
a
comparison
to
that
of
an
expert
teacher
and
novice
teacher
as
described
in
the
literature.
eil’s
and
rina’s
behaviors,
as
described
above,
matched
that
of
an
expert
prototype.
when
sarah
coped
with
students’
questions,
the
quality
of
her
responses
was
far
from
perfect.
a
comprehensive
response
would
attempt
to
clarify
concepts
taught
and
their
interrelations.
explanations
should
be
given
at
various
level
of
abstraction
according
to
the
context
and
the
need
of
the
student:
the
metaphoric
level
might
be
useful
to
discuss
inheritance
concepts
in
general,
and
the
mechanism
level
might
be
useful
to
explain
why
things
work
the
way
they
do.
sara’s
explanations
sometimes
were
unclear,
and
inﬂexible,
even
laconic,
with
very
little
eﬀort
to
improve
explanations,
or
provide
explanations
that
address
students’
feedback.
table
3.
sarah’s
behavior
in
the
classroom
lessons
in
comparison
to
expert
and
novice
prototypes.
characteristics
novice
expert
sarah
focus
of
concern
flexibility
vs.
adherence
to
a
pre-deﬁned
plan
encouraging
students
to
ask
questions
response
to
students’
questions
quality
of
answers
and
explanations
themselves
high
level
of
students
and
task
highly
ﬂexible
adherence
to
pre-deﬁned
plan
low
high
students
and
task
high
level
of
adherence
to
pre-deﬁned
plan
high
evading
or
providing
unsatisfactory
answers
sometimes
unclear,
incorrect,
or
laconic
comprehensive,
ineﬀective
strategies
correct,
promote
students’
learning
that
do
not
promote
students’
learning
clear,
correct,
sometimes
unclear,
attuned
to
the
students
incorrect,
or
laconic
improvisation
of
rare,
often
futile
frequent
examples,
analogies
and
explanations
moderate,
often
futile
computer
science
education
275
however,
it
is
a
fact
that
she
coped
with
the
students’
questions.
moreover,
as
would
have
been
expected
from
an
expert,
she
encouraged
the
students
to
ask
questions.
she
was
focused
on
the
students,
and
seemed
to
care
about
their
understanding.
she
attempted
to
improvise
explanations
and
analogies
several
times.
unlike
an
expert,
however,
the
quality
of
these
analogies
and
explanations
was
not
always
high.
finally,
it
seems
as
if
she
developed
tactics
that
enabled
her
to
survive
students’
questions
but
were
not
oriented
necessarily
toward
promoting
their
understanding.
obviously,
this
behavior
is
not
typical
of
experts.
it
can
be
described
as
a
hybrid.
the
care
and
the
readiness
to
deal
with
questions
resemble
expert
behavior,
whereas
the
ineﬀective
tactics
echo
novices’
typical
behavior.
laboratory
sessions:
the
teachers’
knowledge
growth
here,
we
discuss
sarah’s
observed
behavior
in
four
laboratory
sessions.
as
in
the
classroom,
her
behavior
indicated
self
conﬁdence
in
her
position
as
a
teacher
throughout
the
four
sessions.
she
encouraged
students
to
ask
questions
and
interacted
with
them,
moving
from
one
to
the
other.
that
is,
she
behaved
like
an
expert.
as
in
the
classroom
sessions,
her
fragile
content
knowledge
was
also
prominently
visible
in
the
laboratory
sessions;
however
her
behavior
in
these
sessions
was
rather
diﬀerent
than
that
exhibited
in
the
classroom
sessions
(described
above).
unlike
in
the
classroom,
her
use
of
ineﬀective
tactics
was
rather
minor.
these
tactics
were
probably
replaced
by
a
diﬀerent
tactic
sarah
could
use
only
in
the
laboratory,
namely
trial
and
error.
this
occurred
when
she
experimented
with
changes
in
programs
and
how
they
compile
and
run,
or
guided
her
students
to
do
so.
probably
because
of
the
immediate
feedback
provided
by
the
system
and
her
familiarity
with
students’
expectations
to
get
their
programs
to
work,
she
knew
this
was
the
strategy
to
use.
we
focus
from
now
on
one
laboratory
session,
ds4,
in
which
sarah
and
her
students
worked
on
an
exercise
about
the
use
of
inheritance.
the
exercise
is
described
in
liberman,
ben-david
kolikant,
and
beeri
(2009).
the
exercise
tested
the
students’
knowledge
about
the
need
to
use
in
a
subclass
constructor
the
superclass’
constructor,
and
how
to
use
it
to
initialize
a
property
of
an
object,
in
a
situation
where
two
parameters
of
the
subclass’
constructor
had
to
be
combined
by
concatenation
to
become
the
value
for
the
property.
the
need
to
use
the
superclass’
constructor
was
presented
by
sarah
in
a
previous
classroom
lecture,
so
both
she
and
her
students
were
supposed
to
know
it.
the
need
for
concatenation
of
the
two
parameters
also
seemed
to
be
obvious
to
sarah
and
her
students,
nevertheless,
the
exercise
turned
out
to
be
problematic
for
both
sarah
and
her
students
–
the
need
to
send
the
concatenated
value
to
the
superclass’
constructor
evaded
them.
sarah
reported
that
she
had
solved
276
n.
liberman
et
al.
the
exercise
at
home
before
the
session.
however,
apparently
these
preparations
were
insuﬃcient.
as
we
show
below,
the
session
served
as
a
learning
opportunity
for
sarah.
initially,
when
faced
with
students’
questions,
she
obviously
believed
that
one
can
initialize
the
property
directly
in
the
subclass’
constructor,
without
invoking
the
superclass’
constructor.
during
the
session,
due
to
students’
pressure
and
by
trial
and
error,
she
acquired
and
interned
the
knowledge
that
she
herself
had
formerly
taught
to
the
class,
that
one
must
invoke
the
superclass’
constructor’
and
how
to
do
that
in
the
situation
described
in
the
exercise.
figure
2
summarizes
a
qualitative
analysis
of
sarah’s
behavior
in
this
session.
in
the
beginning
she
(mistakenly)
decided
to
use
this
instead
of
super,
although
allegedly,
she
possessed
the
correct
knowledge,
since
in
a
former
classroom
lesson
(ds1)
she
said:
the
ﬁrst
line
in
the
constructor
[pause],
when
i
want
to
use
the
constructor
of
a
super
class,
i
won’t
write
this.milk
and
then
super,
[but
rather]
i’ll
ﬁrst
call
the
super
class
by
super
and
then
add
what
i
need
to
add.
apparently
when
she
interacted
with
her
students
in
the
laboratory,
at
least
in
the
beginning,
she
did
not
apply
this
piece
of
knowledge.
this
is
demonstrated
by
the
following
excerpt
taken
from
the
ﬁrst
minutes
of
class:
(1)
student1:
i
need
to
use
super
here,
correct?
(2)
sarah:
just
a
sec
[reading
the
code
slowly
out
loud]
(3)
student1:
i
used
here,
too
figure
2.
a
summary
of
the
qualitative
analysis
of
the
laboratory
session.
computer
science
education
277
(4)
sarah:
[deletes
super
from
the
student’s
program,
and
instead
types:
this.recipient
¼
bride
þ
‘‘
’’
þ
groom]
(5)
student1:
this
instead
[of
super]?
sarah’s
response
(line
2)
demonstrates
her
stalling
tactic.
she
responded
fast,
but
without
addressing
the
student’s
question.
in
fact,
in
the
conversation
with
her
right
after
the
lesson
sarah
explained
that
she
bought
time.
however,
the
use
of
this
(and
similar)
ineﬀective
tactic
was
abandoned
quickly
since
students
did
not
manage
to
get
their
programs
compiled
and
expected
the
teacher
to
assist
them
with
their
task.
sarah,
too,
started
using
the
system
and
noticed
the
unsatisfactory
output.
she
then
tried
the
use
of
super
and
succeeded.
obviously,
she
then
thought
she
can
do
it
either
way:
student1:
so
why
did
you
solve
it
with
student2
diﬀerently?
sarah
:
because
student2
did
not
use
super.
she
constructed
it
all
by
herself
student1:
so
if
i
don’t
want
to
use
the
super
class?
sarah:
then
write
this.recipient,
write
it
from
the
beginning
however,
later
as
the
evidence
from
the
compiler
(upon
compilation
attempts)
accumulated,
she
realized
that
this
does
not
work
in
the
situation’
and
one
must
use
super
to
invoke
the
superclass’
constructor.
when
she
realized
this
is
the
case,
she
openly
admitted
her
mistake
to
the
students
and
guided
them
to
work
with
super:
everyone
has
the
same
diﬃculty,
don’t
do
it
like
this
[with
this].
use
super.
you
have
to
use
the
constructor
of
the
super
class.
i
know
i
did
not
say
in
class
that
you
have
to,
but
you
have
to.
from
the
observation
of
this
session,
we
concluded
that
during
the
session
her
ck
on
this
speciﬁc
topic
grew
to
some
extent.
this
was
pro-
bably
due
to
the
unique
context
characterized
by
pressure
of
the
students,
the
need
to
make
programs
compile
and
execute
correctly,
and
the
interaction
with
the
compiler.
we
noted
that
in
a
classroom
lecture,
when
sarah
taught
the
notion
of
upcast,
such
evolution
of
her
knowledge
was
not
observed.
students
repeatedly
asked
her
to
explain
what
it
means
and
she
repeated
essentially
the
same
(laconic
and
vague)
explanation,
which
the
students
obviously
found
to
be
unsatisfactory,
again
and
again.
the
similarities
and
diﬀerences
between
the
two
sessions
are
discussed
below.
summary
and
discussion
this
study
revolves
around
the
question
as
to
how
experienced
teachers
cope
with
the
need
to
teach
inherently
new
knowledge.
in
our
speciﬁc
case
we
studied
cs
teachers,
whose
education
and
teaching
experience
were
in
278
n.
liberman
et
al.
the
procedural
programming
paradigm
and
were
required
to
teach
oop.
in
the
traditional
viewpoint
(e.g.
berliner,
1994,
2001;
shulman,
1986,
1987)
on
teacher
development
from
novices
to
experts,
the
emphasis
in
teachers’
development
is
on
the
growth
in
their
pk
and
pck.
the
starting
point
of
novice
teachers
is
characterized
by
both
low
pk
and
low
pck,
whereas
the
experienced
teacher,
the
expert
has
both
high
pk
and
high
pck.
the
teachers
we
observed
were
experienced
cs
teachers
who
have
already
gained
substantial
pk
and
pck,
but
both
were
developed
and
used
in
the
context
of
their
teaching
of
the
procedural
programming
paradigm.
thus,
the
situation
we
studied
does
not
ﬁt
the
traditional
model.
our
ﬁndings
indicate
that
expert
cs
teachers
that
each
a
paradigm
new
are
in
a
new
teacher
state,
which
we
term
regressed
expert,
which
is
a
hybrid
between
the
expert
and
novice
states.
the
ﬁndings
also
suggest
that
teachers
that
enter
the
regressed
expert
state
recover
from
their
regression
in
a
time
span
shorter
than
that
needed
for
a
novice
teacher
to
become
an
expert
teacher.
the
observations
suggest
one
route
that
may
help
in
this
recovery.
the
regressed
expert
in
the
ﬁndings
section,
we
had
described
in
detail
the
behavior
of
one
of
these
teachers,
sarah,
who
taught
oop
for
the
ﬁrst
time,
in
classroom
pen
and
paper
sessions,
and
compared
it
to
those
of
two
other
teachers
with
more
experience
in
teaching
oop.
sarah’s
behavior
had
some
character-
istics
of
the
novice
teacher
state.
the
most
prominent
novice-like
element
in
her
behavior
was
inﬂexibility.
this
inﬂexibility
had
two
expressions:
first,
sarah’s
faithfully
followed
the
lesson
plans
and
used
only
materials
provided
by
the
developers,
namely
textbook,
powerpoint
presentations,
and
exercises.
when
students
asked
questions
about
topics
that
appeared
in
later
slides,
she
chose
not
to
answer.
she
could
alternatively
jump
to
this
slide
or
answer
brieﬂy
and
indicate
that
a
more
elaborated
answer
will
be
provided
soon.
sarah
did
not
change
the
order
of
instruction
suggested
by
the
developers,
nor
did
she
change
any
of
the
examples
provided
in
the
presentations.
as
a
matter
of
fact,
she
chose
not
to
change
the
example
used
to
explain
a
certain
topic
even
though
she
thought
in
advance
it
was
not
a
good
example.
the
second
expression
of
her
inﬂexibility
was
her
diﬃculty
to
improvise
in
class
and
attune
her
reactions
to
students’
needs.
sarah
was
aware
of
this
diﬃculty.
she
reported
that
her
ck
was
fragile
and
moreover
she
felt
that
unlike
her
teaching
of
pascal,
she
did
not
have
schemes
and
patterns
of
cases
for
the
new
paradigm,
i.e.
she
felt
her
pck
was
lacking.
for
this
reason
her
explanations
were
sometimes
unclear,
and
she
sometimes
came
up
with
unsuccessful
computer
science
education
279
improvisations,
or
with
analogies
misleading.
that
were
ineﬀective
or
worse,
like
novices,
sarah
had
diﬃculties
dealing
with
the
cognitive
load
of
students’
questions.
however,
despite
her
inability
to
address
the
students,
and
unlike
novices,
she
employed
tactics
which
enabled
her
to
keep
a
business-as-usual
atmosphere
in
the
classroom.
but,
as
described
above,
probably
because
of
her
pk,
these
tactics
were
often
ineﬀective
in
advancing
the
knowledge
of
her
students.
sarah
herself
admitted
her
use
of
these
ineﬀective
tactics
in
the
interview.
she
asserted
that
she
did
not
need
to
use
these
tactics
when
teaching
pascal
because
of
her
rich
teaching
experience
of
the
procedural
paradigm.
this
aspect
of
her
behavior
is
characteristic
of
neither
novices
nor
experts.
sarah’s
behavior
also
exhibited
some
characteristics
expected
from
experts.
a
prominent
element
in
her
behavior
was
her
focus
on
the
students
and
their
needs.
despite
her
fragile
knowledge,
she
kept
encouraging
them
to
ask
questions,
kept
asking
whether
they
understood,
and
was
able
to
admit
in
the
classroom
for
several
times
that
she
does
not
know
the
answer.
another
expert-like
element
in
her
behavior
was
her
tendency
to
improvise
in
response
to
students’
questions.
although
due
to
her
fragile
knowledge
her
improvisations
were
often
unsuccessful,
sarah
kept
improvising.
thus,
sarah’s
behavior
can
be
described
as
a
hybrid.
she
was
neither
a
novice
nor
an
expert.
this
behavior
reﬂects
the
fact
that
like
a
novice
her
pck
relevant
to
oop
was
fragile.
(as
demonstrated
above,
she
also
had
a
fragile
ck
in
oop.)
however,
unlike
novices
she
had
a
rich
pk
as
well
as
a
rich
pck,
both
relevant
to
teaching
procedural
programming.
these
probably
governed
her
expert-like
behavior,
such
as
her
focus
on
the
students
and
her
encouragement
of
her
students
to
ask
questions.
however,
the
combination
of
her
rich
pck
in
cs
teaching
and
her
fragile
ck
in
oop
often
led
her
to
use
ineﬀective
tactics.
the
descriptions
provided
by
the
other
two
teachers
of
the
ﬁrst
year
of
their
teaching
oop
reﬂect
a
similar
pattern.
thus,
sarah’s
observed
behavior,
as
well
as
their
reports,
suggest
a
new
teacher
state,
a
hybrid
of
the
novice
and
the
expert
states,
which
we
suggest
to
name
a
regressed
expert.
this
is
the
state
of
an
experienced
teacher,
who
needs
to
learn
and
then
teach
a
new
body
of
knowledge,
quite
diﬀerent
from
that
which
he
or
she
has
been
teaching.
the
learning
trajectory
of
regressed
experts
we
chose
the
term
‘‘regressed
expert’’
to
emphasize
that
experienced
cs
teachers’
pk
and
pck
help
them
in
the
process
of
learning
to
teach
a
new
programming
paradigm.
indeed,
in
contrast
to
sarah,
the
observed
280
n.
liberman
et
al.
behaviors
in
class
of
the
other
two
teachers,
eli
and
rina,
ﬁt
that
of
an
expert.
their
self-reports
of
having
behavior
similar
to
that
demonstrated
by
sarah
in
their
ﬁrst
year
of
teaching
oop,
given
their
relatively
short
period
of
teaching
oop,
suggest
that
such
regressed
experts
learn
the
new
paradigm
and
how
to
eﬀectively
teach
it
faster
than
novices.
for
example,
according
to
berliner’s
(2001)
model
of
teachers’
knowledge
growth,
it
takes
novices
at
least
six
years
of
teaching
to
become
experts.
that
is,
regressed
experts
can
recover
in
a
relatively
shorter
time
span
than
that
required
for
a
novice
to
become
an
expert.
it
is
probable
that
their
experience
and
accumulated
pck
help
in
this
recovery.
the
observations
reported
in
the
ﬁndings
section
suggest
one
way
a
regressed
expert
teaching
a
new
paradigm
of
programming
can
recover.
sarah’s
behavior
in
the
lab
sessions
was
quite
diﬀerent
from
that
in
the
classroom
sessions.
she
used
ineﬀective
tactics
in
the
laboratory
much
less
than
in
the
classroom
lessons.
although
she
faced
ongoing
pressure
from
the
students,
and
accumulated
evidence
of
her
lack
of
knowledge
as
how
to
solve
the
problem,
she
did
not
lose
her
self-conﬁdence.
on
the
contrary,
she
remained
calm
and
through
trial
and
error
recovered
from
her
erroneous
knowledge
and
immediately
turned
to
address
students’
needs.
it
was
evident
that
during
the
session
her
knowledge
about
the
topic
of
that
session
advanced.
we
believe
that
a
novice
teacher
in
similar
situation
would
not
behave
similarly
–
this
teacher
might
be
overwhelmed
by
the
pressure,
as
demonstrated
for
example
in
the
work
by
lapidot
(2004).
sarah’s
experience
as
a
cs
teacher
allowed
her
to
control
the
situation
and
actually
make
it
a
learning
opportunity.
her
familiarity
with
the
students’
expectations,
and
her
commitment
to
help
them
make
their
program
work,
prevented
her
from
using
non-productive
responses,
and
concentrate
on
rethinking
her
knowledge.
in
comparison,
in
the
last
classroom
(pen
and
paper)
session
we
observed,
although
students
repeatedly
expressed
their
lack
of
satisfaction
of
the
vague
and
rather
laconic
explanation
sarah
provided
(of
the
nature
of
upcast),
she
repeated
it
again
and
again.
obviously,
her
knowledge
in
that
lesson
did
not
advance.
what
are
the
diﬀerences
between
lab
and
classroom
(pen
and
paper)
sessions?
in
a
classroom
session,
often
new
material
is
presented
to
the
class.
also,
the
teacher
has
more
control
on
the
lesson
ﬂow.
given
that
the
material
is
new,
some
diﬃculties
in
understanding
it
are
to
be
expected.
there
is
no
immediate
task
the
students
need
to
perform,
so
there
is
less
pressure
on
the
teacher
to
address
and
resolve
diﬃculties.
therefore,
even
when
her
explanation
or
answer
is
not
well
received,
she
can
proceed
with
the
lesson
plan.
however,
in
the
lab
session,
the
students
are
faced
with
a
concrete
task,
namely
to
design
and
write
a
program
that
the
speciﬁcation
in
an
exercise.
the
students
expect
productive
answers
satisﬁes
computer
science
education
281
that
will
enable
them
to
remove
errors
from
their
programs
so
that
eventually
the
programs
will
compile
without
errors,
and
execute.
hence,
ineﬀective
tactics
such
as
repeating
a
vague
answer
will
not
work.
as
was
evident
in
the
observed
session,
at
least
some
of
the
students
expected
the
solution
to
conform
to
the
guidelines
presented
previously
in
class.
their
claim
was
supported
by
the
compiler
error
messages,
that
is,
the
compiler
served
as
a
neutral
judge
whose
decisions
are
ﬁnal.
sarah’s
experience
of
teaching
programming,
and
self
conﬁdence,
helped
her
to
understand
the
implied
meaning
of
the
error
messages,
and
to
correct
her
own
mistake.
we
note
here
another
diﬀerence
between
the
subjects
of
the
classroom
and
lab
sessions
that
we
observed,
that
has
to
be
taken
in
consideration.
in
the
lab
session,
one
had
to
write
a
program
with
a
constructor
for
a
subclass.
the
rules
of
the
language
are
clear:
in
such
a
case,
the
constructor
of
the
parent
class
has
to
be
called
in
the
constructor
of
the
subclass;
if
it
is
not,
the
compiler
will
add
implicitly
such
a
call,
or
emit
an
error
message
if
that
is
not
possible.
the
exercise
was
designed
so
that
such
an
implicit
call
was
not
possible.
an
experienced
teacher
that
has
presented
the
relevant
rule
in
class
will
probably
understand
the
connection
between
the
error
message
and
the
rule,
correct
the
program,
and
probably
also
understand
the
motivation
for
the
rule.
but,
in
the
classroom
session,
the
rules
relevant
to
casts
were
known
to
the
teacher,
and
to
some
extent
to
the
students.
what
the
students
lacked,
and
asked
for,
was
a
model
of
upcast
to
help
them
understand
the
rules.
writing
a
program
and
compiling
it
would
not
provide
any
help
on
that.
since
the
teacher
also
did
not
possess
a
suitable
model
of
casts,
the
only
route
available
to
her
was
repeating
her
vague
answer.
there
was
no
approach
open
to
her
to
improve
her
understanding
at
that
time
(for
such
a
model,
see
liberman,
beeri,
and
ben-david-kolikant,
2011.)
conclusions,
implications
and
future
work
due
to
a
program
reform,
experienced
cs
teachers
faced
the
need
to
master
and
teach
a
new
paradigm,
an
opportunity
to
explore
the
relationship
between
teachers’
ck
and
their
pck.
based
on
our
ﬁndings
we
claim
that
this
situation
may
create
a
new
hybrid
state
of
teachers,
which
we
termed
‘‘regressed
experts.’’
such
teachers
incorporate
in
their
professional
behavior
both
elements
typical
of
novices
and
ones
typical
of
experts.
we
also
found
that
these
teachers’
experience,
although
established
when
teaching
a
diﬀerent
ck,
serve
as
a
leverage
to
improve
their
knowledge
and
understanding
of
aspects
of
the
new
content.
our
results
indicate
a
potential
for
growth
of
experienced
cs
teachers’
knowledge
in
laboratory
sessions
and
highlight
the
importance
of
the
laboratory
in
these
teachers’
courses.
perhaps,
these
courses
should
282
n.
liberman
et
al.
include
activities
where
the
teachers
emulate
a
laboratory
session.
such
an
experience
might
help
them
to
improve
their
understanding
of
(at
least
certain
aspects
of)
the
ck
and
encourage
them
to
develop
an
initial
pck,
by
emulating
the
pressure
of
students
in
this
contexts,
their
possible
questions
and
the
computer
messages,
in
the
secure
context
of
the
course.
further
research
is
required.
obviously,
studies
based
on
larger
samples
of
cs
teachers,
and
a
variety
of
teaching
situations
and
subjects,
are
required
to
make
any
assumptions
on
the
generalization
of
our
ﬁndings,
and
perhaps
to
further
understand
the
behavior
of
cs
teachers
in
similar
situations.
nonetheless,
this
study
brings
up
the
hypothesis
that
cs
teachers’
pck
and
pk,
even
when
acquired
when
they
taught
a
diﬀerent
paradigm
in
cs,
may
strengthen
these
teachers
when
encounter-
ing
diﬃculties
and
enable
them
to
function
and
learn
eﬀectively.
future
work
is
also
required
to
develop
models
of
support
for
these
teachers.
for
example,
capturing
the
emerging
pck
and
sharing
it
within
the
teachers’
community
might
fasten
teacher
learning
and
development
of
pck,
enhance
their
sense
of
community
and
encourage
them
to
consult
with
peers.
the
examination
of
this
hypothesis
is
relevant
not
only
to
the
community
of
cs
educators,
who
typically
face
rapid
curricular
changes,
but
also
to
the
broad
community
of
educators.
in
the
age
of
information
explosion
and
the
increasing
pace
of
the
changes
in
our
life
and
in
the
world,
schools
and
teachers
will
probably
need
to
ﬂexibly
adjust
to
rapid
changes.
this
study
implies
that
such
adjustment
is
feasible.
certainly,
studies
of
teachers
in
other
disciplines
that
face
similar
situations
are
needed
to
reveal
which
of
our
ﬁndings,
if
any,
are
applicable
to
those
disciplines,
and
which
are
inﬂuenced
by
speciﬁc
properties
of
the
cs
discipline.
references
bents,
m.,
&
bents,
r.
(1990).
perceptions
of
good
teaching
among
novice’
advanced
beginner
and
expert
teachers.
paper
presented
at
the
annual
meetings
of
the
american
educational
research
association,
boston,
ma.
berliner,
d.c.
(1994).
expertise:
the
wonder
of
exemplary
performances.
in
j.n.
mangieri
&
c.
collins
block,
(eds.),
creating
powerful
thinking
in
teachers
and
students.
holt,
rinehart
&
winston,
ch.
7.
berliner,
d.c.
(2001).
learning
about
and
learning
from
expert
teachers.
international
journal
of
educational
research,
35,
463–482.
borko,
h.
(1992).
patterns
across
the
proﬁles:
a
critical
look
of
theories
of
learning
to
teach.
paper
presented
at
the
meetings
of
the
american
educational
research
association,
san
francisco,
ca.
eisenhart,
m.,
&
jones,
d.
(1992).
developing
teacher
expertise:
two
theories
and
a
study.
paper
presented
at
the
meetings
of
the
american
educational
research
association,
san
francisco,
ca.
even,
r.
(1990).
subject
matter
knowledge
for
teaching
and
the
case
of
functions.
educational
studies
in
mathematics,
21,
521–544.
computer
science
education
283
fuller,
f.f.
(1973).
teacher
education
and
the
psychology
of
behavior
change:
a
conceptualization
of
the
process
of
aﬀective
change
of
pre-service
teachers.
paper
presented
at
the
annual
meeting
of
the
american
psychological
association
in
montreal
canada.
guba,
e.g.,
&
lincoln,
y.s.
(1981).
eﬀective
evaluation.
san
francisco:
joss-bass
inc.
publishers.
lapidot,
t.
(2004).
the
learning
of
computer-science
teachers
during
their
teaching
work.
(unpublished
dissertation),
technion,
haifa.
leinhardt,
g.
(1989).
math
lessons:
a
contrast
of
novice
and
expert
competence.
journal
of
research
in
mathematics
education,
20(1),
52–75.
liberman,
n.,
ben-david
kolikant,
y.,
&
beeri,
c.
(2009).
in-service
teachers
learning
of
a
new
paradigm:
a
case
study.
in
proceedings
of
the
ﬁfth
international
workshop
on
computing
education
research
workshop
(icer’09)
(pp.
43–50).
new
york,
ny:
acm.
liberman,
n.,
beeri,
c.,
&
ben-david-kolikant,
y.
(2011).
diﬃculties
in
learning
inheritance
and
polymorphism.
acm
transactions
on
computing
education,
11(1),
4.
novak,
j.d.
(1990).
concept
mapping:
a
useful
tool
for
science
education.
journal
of
research
in
science
teaching,
27,
937–949.
olson,
j.k.
(1990).
teachers’
conceptions
of
their
subject
and
laboratory
work
in
science.
in
e.
hegarty-hazel
(ed.),
the
student
laboratory
and
the
science
curriculum
(pp.
201–220).
london
and
new
york:
routledge.
palmer,
d.j.,
stough,
l.m.,
burdenski,
t.k.,
&
gonzales,
m.
(2005).
identifying
teacher
expertise:
an
examination
of
researchers’
decision
making.
educational
psychologist,
40(1),
13–25.
shkedi,
a.
(2003).
words
of
meaning:
qualitative
research–theory
and
practice.
tel
aviv,
israel:
ramot.
shulman,
l.s.
(1986).
those
who
understand:
knowledge
growth
in
teaching.
educational
researcher,
15,
4–14.
shulman,
l.s.
(1987).
knowledge
and
teaching:
foundations
of
the
new
reform.
harvard
educational
review,
57(1),
1–22.
tsui,
a.b.m.
(2009).
distinctive
qualities
of
expert
teachers.
teachers
and
teaching:
theory
and
practice,
15,
421–439.
zilberstein,
m.,
&
katz,
p.
(1998).
a
great
teacher,
an
expert
teacher,
a
professional:
three
aspects
of
the
personality
of
the
‘teacher
asher’.
dapim,
26,
53–71
(in
hebrew).

